/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import GUI.TableModels.TableModelBackups;
import Modelo.DTOs.BackUp;
import Modelo.MyExceptions;
import Modelo.OperacionesFicheros;
import com.seaglass.SeaGlassLookAndFeel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author aranx
 */
public class MostrarBackups extends javax.swing.JDialog {

    private PantallaPrincipal parent;

    public Color backgroundColor() {
        return jPanel.getBackground();
    }

    /**
     * Creates new form MostrarBackups
     */
    public MostrarBackups(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent = (PantallaPrincipal) parent; // Asignarlo antes de initComponents() para que asigne el backgroundColor a la jTable
        try {
            // Refrescamos los datos de la lista del controlador antes de utilizarlos para inicializar nuestro tableModel
            this.parent.getControlador().refrescarListaBackups();
        } catch (IOException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        }

        //cambiarLookAndFeel(); // CASCA JAVAHELP AL APLICAR EL LOOK AND FEEL
        initComponents();
        
        // Configuramos el JavaHelp
        // Carga el fichero de ayuda
        try {
            File fichero = new File("./help/help_set.hs");
            URL hsURL = fichero.toURI().toURL();
            // Crea el HelpSet y el HelpBroker
            HelpSet helpset;
            helpset = new HelpSet(getClass().getClassLoader(), hsURL);
            HelpBroker hb = helpset.createHelpBroker();
            // Pone ayuda a item de menu al pulsarlo.
           hb.enableHelpKey(getRootPane(),"inicio",helpset);
        } catch (HelpSetException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        }

        setTitle("BackUps");
        // Colocamos la pantalla en el centro del monitor
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation((int) ((screenSize.getWidth() - this.getWidth()) / 2), (int) ((screenSize.getHeight() - this.getHeight()) / 2));

        // Asignamos al jTable un tableModel de nuestro tipo
        TableModelBackups tableModelBackups = new TableModelBackups(this.parent.getControlador().getListaBackUps());
        jTable_backups.setModel(tableModelBackups);
        // Asignamos al jTable un objeto para poder ordenar por sus columnas el contenido
        TableRowSorter sorter = new TableRowSorter(tableModelBackups);
        jTable_backups.setRowSorter(sorter);

        SimpleDateFormat dateFormat = new SimpleDateFormat("DD-MM-YYYY hh:mm:ss");

        // El botón de aplicar opción estará inicialmente inhabilitado, hasta que escojamos una opción
        jButton_aplicarOpcion.setEnabled(false);

        // NO FUNCIONA 0.o
        // Lanzamos un hilo en segundo plano que actualice la lista de backups y la tabla en tiempo real,
        // para que elimine la fila correspondiente si borramos un backup estando la ventana abierta
        Thread hiloActualizar = new Thread() {
            @Override
            public void run() {
                actualizarBackupsYRefrescar();
            }
        };
        hiloActualizar.start();

    }

    // Necesito el getter de la jtable para sacar el backup seleccionado en la pantalla de mostrarDuplicados
    public JTable getjTable_backups() {
        return jTable_backups;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_backups = new javax.swing.JTable();
        jComboBox_opciones = new javax.swing.JComboBox<>();
        jButton_aplicarOpcion = new javax.swing.JButton();
        jB_volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel.setBackground(this.parent.backgroundColor());

        jTable_backups.setBackground(jPanel.getBackground());
        jTable_backups.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jTable_backups.setForeground(new java.awt.Color(0, 102, 153));
        jTable_backups.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_backups.setFillsViewportHeight(true);
        jTable_backups.setSelectionBackground(new java.awt.Color(255, 102, 0));
        jTable_backups.setSelectionForeground(new java.awt.Color(0, 102, 153));
        jScrollPane1.setViewportView(jTable_backups);

        jComboBox_opciones.setBackground(jPanel.getBackground());
        jComboBox_opciones.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jComboBox_opciones.setForeground(new java.awt.Color(0, 102, 153));
        jComboBox_opciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Opciones...", "Mostrar todos", "Buscar por fecha", "Restaurar", "Eliminar", "Buscar duplicados", "Copiar a otra carpeta" }));
        jComboBox_opciones.setToolTipText("Opciones");
        jComboBox_opciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_opcionesActionPerformed(evt);
            }
        });

        jButton_aplicarOpcion.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jButton_aplicarOpcion.setForeground(new java.awt.Color(255, 102, 0));
        jButton_aplicarOpcion.setText("Aplicar selección");
        jButton_aplicarOpcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_aplicarOpcionActionPerformed(evt);
            }
        });

        jB_volver.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jB_volver.setForeground(new java.awt.Color(255, 102, 0));
        jB_volver.setText("Volver");
        jB_volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_volverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(jComboBox_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_aplicarOpcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                        .addComponent(jB_volver)))
                .addContainerGap())
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_aplicarOpcion)
                    .addComponent(jB_volver))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB_volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_volverActionPerformed
        dispose();
    }//GEN-LAST:event_jB_volverActionPerformed

    private void jButton_aplicarOpcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_aplicarOpcionActionPerformed
        switch (jComboBox_opciones.getSelectedIndex()) {
            case 1:
                // MOSTRAR TODOS
                // Si hubiera algún filtro aplicado al rowSorter del jTable, lo eliminados
                TableRowSorter rowSorter = (TableRowSorter) jTable_backups.getRowSorter();
                rowSorter.setRowFilter(null);
                break;
            case 2:
                // FILTRAR POR FECHA
                EscogerFecha pantallaEscogerFecha = new EscogerFecha(this, true); // Esta sí la hacemos modal
                pantallaEscogerFecha.setVisible(true);
                // Sacamos la fecha elegida del nuevo jDialog, que se habrá puesto setVisible(false) al dar aceptar en su ventana
                filtrarPorFechaElegida(pantallaEscogerFecha);
                // Cerramos la ventana emergente que había quedado visible(false)
                pantallaEscogerFecha.dispose();
                break;
            case 3:
                // RESTAURAR
                restaurarBackupsSeleccionados();
                break;
            case 4:
                // ELIMINAR
                eliminarBackupsSeleccionados();
                break;
            case 5:
                // VER DUPLICADOS
                mostrarDuplicadosBackupSeleccionado();
                break;
            case 6:
                // COPIAR A OTRA CARPETA
                copiarBackupsSeleccionadosEnOtraCarpeta();
                break;
        }
    }//GEN-LAST:event_jButton_aplicarOpcionActionPerformed

    private void jComboBox_opcionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_opcionesActionPerformed
        // Si no se escoge una opción válida, se desactiva el botón de aplicar, y se activa cuando se escoge una opción
        if (jComboBox_opciones.getSelectedIndex() == 0) {
            jButton_aplicarOpcion.setEnabled(false);
        } else {
            jButton_aplicarOpcion.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBox_opcionesActionPerformed

    public void actualizarBackupsYRefrescar() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    parent.getControlador().refrescarListaBackups();
                } catch (IOException ex) {
                    Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
                }
                refrescarTabla();
            }
        });
    }

    public void refrescarTabla() {
        // Hay que declarar primero la variable para castearla, si no no podemos usar el método propio de nuestra 
        // clase TablaContactos porque lo trata como un TableMode y no aparecen los métodos de la clase hija
        TableModelBackups tableModel = (TableModelBackups) jTable_backups.getModel();
        tableModel.refrescar();
    }

    public void filtrarPorFechaElegida(EscogerFecha pantallaEscogerFecha) {
        Date fechaElegida = (Date) pantallaEscogerFecha.getjSpinner_fecha().getValue();
        // RowFilter.dateFilter(RowFilter.ComparisonType.EQUAL, fechaElegida, 0) nos compara si es idéntica la fecha (con horas, minutos, segundos)
        // Además NO DEVOLVEMOS LA FECHA COMO DATE EN EL TABLEMODEL, la devolvemos formateada como String

        // Usamos una expresión regular
        // En el tableModel devolvemos la fecha con el formato: "E dd/MM/YYYY HH:mm:ss" 
        // habrá que buscar que empiece por la subcadena "E dd/MM/YYYY"
        // y luego se adapte más o menos a la forma de 00:00:00 de hh:mm:ss
        // (no comprobamos que no pase de 23h,59min,59seg, no nos es necesario tanto detalle en este caso)
        SimpleDateFormat dateFormat = new SimpleDateFormat("E dd/MM/YYYY");
        String fechaElegidaFormateada = dateFormat.format(fechaElegida);
        String patronFechaElegida = "^" + fechaElegidaFormateada + "{1}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}";

        // Asignamos al TableRowSorter del jTable un filtro para la fecha elegida
        TableRowSorter rowSorter = (TableRowSorter) jTable_backups.getRowSorter();
        rowSorter.setRowFilter(RowFilter.regexFilter(patronFechaElegida, 0));
    }

    public void mostrarDuplicadosBackupSeleccionado() {
        if (jTable_backups.getSelectedRows().length == 0) {
            JOptionPane.showMessageDialog(this, "No hay ningún backup seleccionado", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (jTable_backups.getSelectedRows().length > 1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona sólo un backup", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            MostrarDuplicados pantallaDuplicados = new MostrarDuplicados(this, false); // No la hacemos modal
            pantallaDuplicados.setVisible(true);
        }
    }

    public void eliminarBackupsSeleccionados() {
        // Sacamos los índices de todas las filas seleccionadas en el jTable
        int[] filasSeleccionadasJTable = jTable_backups.getSelectedRows();
        int[] filasSeleccionadasModelo = new int[filasSeleccionadasJTable.length];

        if (filasSeleccionadasJTable.length == 0) {
            // Si el array devuelto está vacío (no hay ninguna fila seleccionada) mostramos un aviso
            JOptionPane.showMessageDialog(this, "No hay ningún backup seleccionado", "", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int confirmacion = JOptionPane.showConfirmDialog(this, "Los backups seleccionados se eliminarán de manera permanente.\n¿Seguro que deseas continuar?", "", JOptionPane.OK_CANCEL_OPTION);
                // Si ha contestado aceptar, eliminamos las filas
                if (confirmacion == JOptionPane.OK_OPTION) {
                    // Sacamos los índices equivalentes en el TableModel (al ordenar el jTable, no coincidirán)
                    for (int i = 0; i < filasSeleccionadasJTable.length; i++) {
                        filasSeleccionadasModelo[i] = jTable_backups.convertRowIndexToModel(filasSeleccionadasJTable[i]);
                    }
                    // Sacamos el tableModel de nuestra jTable
                    TableModelBackups tableModel = (TableModelBackups) jTable_backups.getModel();
                    // Borramos los directorios padre de los backups asociados a esas filas con todo su contenido
                    for (int i : filasSeleccionadasModelo) {
                        File directorioPadreBackup = tableModel.getRow(i).getDirectorioPadreCreado();
                        OperacionesFicheros.eliminarDirectorioConContenido(directorioPadreBackup);
                    }
                    // Borramos del tablemModel filas seleccionadas               
                    tableModel.removeRows(filasSeleccionadasModelo);
                }
                // Refrescamos la tabla para que cargue la información actualizada tras borrar
                refrescarTabla();

                // Actualizamos los datos persistidos por el controlador
                this.parent.getControlador().actualizarRegistroBackups();
            } catch (IOException ex) {
                Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void restaurarBackupsSeleccionados() {
        // Sacamos los índices de todas las filas seleccionadas en el jTable
        int[] filasSeleccionadasJTable = jTable_backups.getSelectedRows();
        int[] filasSeleccionadasModelo = new int[filasSeleccionadasJTable.length];

        if (filasSeleccionadasJTable.length == 0) {
            // Si el array devuelto está vacío (no hay ninguna fila seleccionada) mostramos un aviso
            JOptionPane.showMessageDialog(this, "No hay ningún backup seleccionado", "", JOptionPane.ERROR_MESSAGE);
        } else {
            int confirmacion = JOptionPane.showConfirmDialog(this, "Esta operación podría eliminar algunos ficheros existentes en tu dispositivo.\n¿Seguro que deseas continuar?", "", JOptionPane.OK_CANCEL_OPTION);
            // Si ha contestado aceptar, restauramos
            if (confirmacion == JOptionPane.OK_OPTION) {
                // Sacamos los índices equivalentes en el TableModel (al ordenar el jTable, no coincidirán)
                for (int i = 0; i < filasSeleccionadasJTable.length; i++) {
                    filasSeleccionadasModelo[i] = jTable_backups.convertRowIndexToModel(filasSeleccionadasJTable[i]);
                }
                // Restauramos cada uno de los backups seleccionados
                for (int i : filasSeleccionadasModelo) {
                    TableModelBackups tableModel = (TableModelBackups) jTable_backups.getModel();
                    BackUp backup = tableModel.getRow(i);
                    try {
                        OperacionesFicheros.restaurarFicherosCopiados(backup);
                    } catch (IOException ex) {
                        Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    public void copiarBackupsSeleccionadosEnOtraCarpeta() {
        // Sacamos los índices de todas las filas seleccionadas en el jTable
        int[] filasSeleccionadasJTable = jTable_backups.getSelectedRows();
        int[] filasSeleccionadasModelo = new int[filasSeleccionadasJTable.length];

        if (filasSeleccionadasJTable.length == 0) {
            // Si el array devuelto está vacío (no hay ninguna fila seleccionada) mostramos un aviso
            JOptionPane.showMessageDialog(this, "No hay ningún backup seleccionado", "", JOptionPane.ERROR_MESSAGE);
        } else {
            JFileChooser jfileChooser = new JFileChooser();
            // Le asignamos un modo de selección de los ficheros que te va a ofrecer para elegir: sólo directorios
            jfileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            // Va a devolver un resultado int en función de si pulsamos aceptar o cancelar
            int resultado = jfileChooser.showSaveDialog(this);
            if (resultado == JFileChooser.APPROVE_OPTION) {
                File directorioSeleccionado = jfileChooser.getSelectedFile();

                // Sacamos los índices equivalentes en el TableModel (al ordenar el jTable, no coincidirán)
                for (int i = 0; i < filasSeleccionadasJTable.length; i++) {
                    filasSeleccionadasModelo[i] = jTable_backups.convertRowIndexToModel(filasSeleccionadasJTable[i]);
                }

                // Restauramos cada uno de los backups seleccionados en el directorio de destino elegido
                for (int i : filasSeleccionadasModelo) {
                    TableModelBackups tableModel = (TableModelBackups) jTable_backups.getModel();
                    BackUp backup = tableModel.getRow(i);
                    try {
                        OperacionesFicheros.restaurarEnRutaElegida(backup, directorioSeleccionado);
                    } catch (IOException ex) {
                        Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (MyExceptions.DirectorioYaExiste ex) {
                        try {
                            String rutaDirectorioYaExistente = directorioSeleccionado.getCanonicalPath() + File.separator + backup.getDirectorioPadreCreado().getName();
                            int confirmacion = JOptionPane.showConfirmDialog(parent, "El directorio " + rutaDirectorioYaExistente + " ya existe,\n¿desea sobreescribirlo?", "", JOptionPane.YES_NO_OPTION);
                            if (confirmacion == JOptionPane.YES_OPTION) {
                                // Borramos el directorio existente y hacemos de nuevo el copiado
                                OperacionesFicheros.eliminarDirectorioConContenido(new File(rutaDirectorioYaExistente));
                                OperacionesFicheros.restaurarEnRutaElegida(backup, directorioSeleccionado);
                            }
                        } catch (IOException ex1) {
                            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex1);
                        } catch (MyExceptions.DirectorioYaExiste ex1) {
                            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                }
            }

        }
    }

    public void cambiarLookAndFeel(){        
        try {
            UIManager.setLookAndFeel(SeaGlassLookAndFeel.class.getCanonicalName());
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MostrarBackups.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB_volver;
    private javax.swing.JButton jButton_aplicarOpcion;
    private javax.swing.JComboBox<String> jComboBox_opciones;
    private javax.swing.JPanel jPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_backups;
    // End of variables declaration//GEN-END:variables
}
